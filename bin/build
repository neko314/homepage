#!/usr/bin/env node

const fg = require("fast-glob");
const fs = require("fs");
const path = require("path");
const yaml = require("js-yaml");

const parseFrontMatter = text => {
  const pattern = /\n*---\n+(?<frontMatter>.+?)\n+---\n*/s;
  const matched = text.match(pattern);
  if (matched === null) {
    return { frontMatter: {}, text };
  }

  let frontMatter = "";
  try {
    frontMatter = yaml.safeLoad(matched.groups.frontMatter);
  } catch (e) {
    console.error(e);
    return { frontMatter: {}, text };
  }
  const trimmed = text.replace(pattern, "");
  return { frontMatter, text: trimmed };
};

const buildSummary = () => {
  let result = {};

  const pattern = path.resolve(__dirname, "../contents/**/*.md");
  const contentPaths = fg.sync([pattern]);

  for (let contentPath of contentPaths) {
    const contentId = path.basename(contentPath, ".md");
    const content = fs
      .readFileSync(contentPath)
      .toString()
      .trim();
    const { frontMatter } = parseFrontMatter(content);
    result[contentId] = { frontMatter, path: contentPath, id: contentId };
  }

  result = JSON.stringify(result);

  const summaryDirPath = path.resolve(__dirname, "../assets/contents/posts/");
  fs.mkdirSync(summaryDirPath, { recursive: true, mode: 0o755 });

  const summaryPath = path.resolve(summaryDirPath, "summary.json");
  fs.writeFileSync(summaryPath, result);
};

const buildContents = () => {
  const pattern = path.resolve(__dirname, "../contents/**/*.md");
  const contentPaths = fg.sync([pattern]);

  for (let contentPath of contentPaths) {
    buildContent(contentPath);
  }
};

const watchContents = () => {
  const pattern = path.resolve(__dirname, "../contents/**/*.md");
  const contentPaths = fg.sync([pattern]);

  for (let contentPath of contentPaths) {
    fs.watch(contentPath, {}, (event, filename) => {
      console.info(`changed: ${contentPath}`);
      buildSummary();
      buildContent(contentPath);
    });
  }
};

const buildContent = filepath => {
  const md = require("markdown-it")({
    html: true,
    linkify: true
  }).use(require("markdown-it-prism"), {
    defaultLanguage: "bash"
  });

  const contentId = path.basename(filepath, ".md");
  const content = fs
    .readFileSync(filepath)
    .toString()
    .trim();
  const { frontMatter, text } = parseFrontMatter(content);
  const html = md.render(text);
  const result = JSON.stringify({
    frontMatter,
    html,
    path: filepath,
    id: contentId
  });

  const contentsDirPath = path.resolve(__dirname, "../assets/contents/posts/");
  fs.mkdirSync(contentsDirPath, { recursive: true, mode: 0o755 });

  const contentPath = path.resolve(contentsDirPath, `${contentId}.json`);
  fs.writeFileSync(contentPath, result);
};

buildSummary();
buildContents();
watchContents();
